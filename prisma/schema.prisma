// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String
  email     String   @unique
  password  String
  address   String
  contact   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
  cart      Cart?
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String
  description String
  price       Float
  stock       Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  categoryId  Int
  category    Category    @relation(fields: [categoryId], references: [id])
  sizes       Size[]
  sales       Sale[]
  orderItems  OrderItem[]
  cartItems   CartItem[]
}

model Size {
  id        Int     @id @default(autoincrement())
  name      String
  productId Int
  product   Product @relation(fields: [productId], references: [id])
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  products    Product[]
}

model Sale {
  id        Int       @id @default(autoincrement())
  productId Int
  product   Product   @relation(fields: [productId], references: [id])
  discount  Float
  startDate DateTime
  endDate   DateTime?
}

model Order {
  id          Int         @id @default(autoincrement())
  orderNumber String      @unique
  createdAt   DateTime    @default(now())
  totalAmount Float
  status      String
  userId      Int
  user        User        @relation(fields: [userId], references: [id])
  items       OrderItem[]
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float
  product   Product @relation(fields: [productId], references: [id])
  order     Order   @relation(fields: [orderId], references: [id])
}

model Cart {
  id     Int        @id @default(autoincrement())
  userId Int        @unique
  user   User       @relation(fields: [userId], references: [id])
  items  CartItem[]
}

model CartItem {
  id        Int     @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int
  cart      Cart    @relation(fields: [cartId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}
