// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  customer
}

enum Status {
  placed
  processing
  dispatched
  in_transit
  out_for_delivery
  delivered
  returned
  cancelled
}

model User {
  id        Int      @id @default(autoincrement())
  username  String
  email     String   @unique
  password  String
  address   String?
  contact   String?
  role      Role     @default(customer)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
  cart      Cart?
}

model Product {
  id          Int            @id @default(autoincrement())
  name        String
  description String
  price       Float
  stock       Int
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  categoryId  Int
  category    Category       @relation(fields: [categoryId], references: [id])
  orderItems  OrderProduct[]
  cartItems   CartProduct[]

  productSizes ProductSize[]
}

model Size {
  id           Int           @id @default(autoincrement())
  name         String
  productSizes ProductSize[]
}

model ProductSize {
  id        Int @id @default(autoincrement())
  productId Int
  sizeId    Int

  product Product @relation(fields: [productId], references: [id])
  size    Size    @relation(fields: [sizeId], references: [id])

  @@unique([productId, sizeId])
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  products    Product[]
}

model Order {
  id          Int            @id @default(autoincrement())
  orderNumber BigInt         @unique
  createdAt   DateTime       @default(now())
  totalAmount Float
  status      Status
  userId      Int
  user        User           @relation(fields: [userId], references: [id])
  items       OrderProduct[]
}

model OrderProduct {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float
  product   Product @relation(fields: [productId], references: [id])
  order     Order   @relation(fields: [orderId], references: [id])
}

model Cart {
  id     Int           @id @default(autoincrement())
  userId Int           @unique
  user   User          @relation(fields: [userId], references: [id])
  items  CartProduct[]
}

model CartProduct {
  id        Int     @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int
  cart      Cart    @relation(fields: [cartId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}
